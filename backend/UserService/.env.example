# ========================================
# USER SERVICE CONFIGURATION
# ========================================
# Copy this file to .env and fill in your actual values
# This file serves as a template and should be committed to GitHub
# The actual .env file should NEVER be committed

# ========================================
# SERVER CONFIGURATION
# ========================================
PORT=3004
NODE_ENV=development

# ========================================
# CLIENT & FRONTEND CONFIGURATION
# ========================================
# Frontend application URL (Next.js app)
# Development: http://localhost:3010
# Production: https://your-domain.com
FRONTEND_URL=http://localhost:3010

# Legacy client URL (keep for backward compatibility)
CLIENT_URL=http://localhost:3000

# Backend service URL (this service)
BACKEND_URL=http://localhost:3004

# ========================================
# MICROSERVICE URLS
# ========================================
# URLs for all backend microservices
# Development: Use localhost with respective ports
# Production: Use actual deployed URLs

AUTH_SERVICE_URL=http://localhost:3001
GYM_SERVICE_URL=http://localhost:3002
PAYMENT_SERVICE_URL=http://localhost:3003
USER_SERVICE_URL=http://localhost:3004
TRAINER_SERVICE_URL=http://localhost:3005

# Public user service URL (accessible from frontend)
NEXT_PUBLIC_USER_SERVICE_URL=http://localhost:3004

# ========================================
# JWT CONFIGURATION
# ========================================
# JWT Secret - MUST match the secret used in AuthService
# IMPORTANT: Use a strong, unique secret in production
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# JWT token expiration time
JWT_EXPIRES_IN=7d

# ========================================
# SUPABASE CONFIGURATION
# ========================================
# Get these from: https://app.supabase.com/project/_/settings/api

# Supabase Project URL
SUPABASE_URL=https://your-project-id.supabase.co

# Supabase Anonymous Key (client-side, limited permissions)
SUPABASE_ANON_KEY=your_supabase_anon_key_here

# Supabase Service Role Key (server-side only, has admin privileges)
# IMPORTANT: Keep this secret! Never expose to client-side code
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key_here

# ========================================
# AIVEN POSTGRESQL CONFIGURATION
# ========================================
# Aiven PostgreSQL database connection
# Get this from: https://console.aiven.io/

# Option 1: Full connection string (recommended)
DATABASE_URL=postgresql://username:password@host:port/database?sslmode=require

# Option 2: Individual parameters (alternative)
DB_HOST=your-db-host.aivencloud.com
DB_PORT=24099
DB_NAME=defaultdb
DB_USER=avnadmin
DB_PASSWORD=your_db_password

# ========================================
# CLOUDINARY CONFIGURATION
# ========================================
# Cloudinary for image and document storage (user profile pictures)
# Get these from: https://cloudinary.com/console

CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# ========================================
# GOOGLE OAUTH & CALENDAR CONFIGURATION
# ========================================
# Get these from: https://console.cloud.google.com/apis/credentials

# Google OAuth Client ID
GOOGLE_CLIENT_ID=your-client-id.apps.googleusercontent.com

# Google OAuth Client Secret
GOOGLE_CLIENT_SECRET=your_google_client_secret

# NextAuth URL (for OAuth callback)
NEXTAUTH_URL=http://localhost:3000

# Google OAuth Authorization URL
GOOGLE_AUTH_URL=https://accounts.google.com/o/oauth2/v2/auth

# Google OAuth Token URL
GOOGLE_TOKEN_URL=https://oauth2.googleapis.com/token

# Google Calendar API URL
CALENDAR_EVENTS_URL=https://www.googleapis.com/calendar/v3/calendars/primary/events

# ========================================
# GOOGLE OAUTH SCOPES (Used by the service)
# ========================================
# Required scopes for Google Calendar integration:
# - https://www.googleapis.com/auth/calendar (Full calendar access)
# - https://www.googleapis.com/auth/calendar.events (Calendar events)
# - https://www.googleapis.com/auth/userinfo.email (User email)
# - https://www.googleapis.com/auth/userinfo.profile (User profile)

# ========================================
# DATABASE TABLES (Used by this service)
# ========================================
# This service interacts with the following Supabase tables:
# - customer: User/customer profiles
# - customer_progress: Weight tracking and fitness progress
# - feedback: Customer feedback for trainers/gyms
# - trainer_sessions: Training sessions (read-only for customer view)
# - Reports: User-submitted reports
# - calendar: Google Calendar event synchronization
# - user_google_tokens: Google OAuth tokens storage

# ========================================
# TESTING CONFIGURATION
# ========================================
# For running tests, create a .env.test file with test database credentials
# See .env.test.example for testing environment configuration

# ========================================
# PRODUCTION EXAMPLE
# ========================================
# NODE_ENV=production
# PORT=3004
# FRONTEND_URL=https://fitnest.com
# BACKEND_URL=https://user-service.fitnest.com
# SUPABASE_URL=https://your-project-id.supabase.co
# SUPABASE_SERVICE_ROLE_KEY=your_production_service_role_key
# DATABASE_URL=postgresql://user:password@production-host:port/database?sslmode=require
# CLOUDINARY_CLOUD_NAME=your_production_cloud_name
# CLOUDINARY_API_KEY=your_production_api_key
# CLOUDINARY_API_SECRET=your_production_api_secret
# GOOGLE_CLIENT_ID=your-production-client-id.apps.googleusercontent.com
# GOOGLE_CLIENT_SECRET=your_production_google_client_secret
# JWT_SECRET=<use-a-strong-random-secret-here>

# ========================================
# SECURITY NOTES
# ========================================
# 1. Never commit .env file to version control
# 2. Use strong, unique passwords for production
# 3. Rotate secrets regularly
# 4. Use different credentials for dev/test/prod environments
# 5. Store production secrets in secure vault (e.g., AWS Secrets Manager, Azure Key Vault)
# 6. Enable Row-Level Security (RLS) policies in Supabase for all tables
# 7. Use HTTPS in production for all endpoints
# 8. Restrict Google OAuth redirect URIs to your domain only
# 9. Keep Google OAuth credentials separate for dev/prod
