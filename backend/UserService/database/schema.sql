-- Users table (extends Supabase auth.users)
create table public.customer (
  id serial not null,
  user_id uuid null,
  first_name character varying(50) not null,
  last_name character varying(50) not null,
  address text null,
  phone_no character varying(15) null,
  birthday date null,
  gender character varying(10) null,
  profile_img text null,
  created_at timestamp without time zone null default now(),
  location json null,
  constraint customer_pkey primary key (id),
  constraint customer_id_key unique (id),
  constraint customer_user_id_key unique (user_id),
  constraint customer_gender_check check (
    (
      (gender)::text = any (
        (
          array[
            'male'::character varying,
            'female'::character varying,
            'other'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

-- Weight tracking table
create table public.customer_progress (
  record_id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  height real null,
  weight real null,
  customer_id integer not null,
  date date null,
  "BMI" real null,
  constraint customer_progress_pkey primary key (record_id)
) TABLESPACE pg_default;


-- calendar table
create table public.calendar (
  calendar_id uuid not null default gen_random_uuid (),
  task_date date not null,
  task text not null,
  description text null,
  google_event_id text null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  color text null,
  start time without time zone null,
  "end" time without time zone null,
  user_id text null,
  constraint calendar_pkey primary key (calendar_id),
  constraint calendar_user_id_fkey foreign KEY (user_id) references user_google_tokens (user_id)
) TABLESPACE pg_default;

create unique INDEX IF not exists idx_calendar_google_event_id on public.calendar using btree (google_event_id) TABLESPACE pg_default;

create trigger update_calendar_updated_at BEFORE
update on calendar for EACH row
execute FUNCTION update_updated_at_column ();

-- Table to store Google OAuth tokens per user (used by UserService)
create table public.user_google_tokens (
  user_id text not null,
  access_token text null,
  refresh_token text null,
  expires_at bigint null,
  scope text null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint user_google_tokens_pkey primary key (user_id)
) TABLESPACE pg_default;


--feedback
create table public.feedback (
  id integer generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  feedback text null,
  trainer_id integer null,
  user_id integer null,
  constraint feedback_pkey primary key (id),
  constraint feedback_user_id_fkey foreign KEY (user_id) references customer (id)
) TABLESPACE pg_default;