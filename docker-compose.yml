services:
  # API Gateway Service
  api-gateway:
    build:
      context: ./backend/apigateway
      dockerfile: Dockerfile
    container_name: fitnest-api-gateway
    ports:
      - "3000:3000"
    volumes:
      - ./backend/apigateway:/app
      - api_gateway_node_modules:/app/node_modules
    env_file:
      - ./backend/apigateway/.env
    environment:
      - PORT=3000
      - NODE_ENV=production
    depends_on:
      - auth-service
      - gym-service
      - payment-service
      - user-service
      - trainer-service
      - admin-service
    networks:
      - fitnest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./backend/AuthService
      dockerfile: Dockerfile
    container_name: fitnest-auth-service
    ports:
      - "3001:3001"
    volumes:
      - ./backend/AuthService:/app
      - auth_service_node_modules:/app/node_modules
    env_file:
      - ./backend/AuthService/.env
    environment:
      - PORT=3001
      - NODE_ENV=production
    networks:
      - fitnest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Gym Service
  gym-service:
    build:
      context: ./backend/GymService
      dockerfile: Dockerfile
    container_name: fitnest-gym-service
    ports:
      - "3002:3002"
    volumes:
      - ./backend/GymService:/app
      - gym_service_node_modules:/app/node_modules
    env_file:
      - ./backend/GymService/.env
    environment:
      - PORT=3002
      - NODE_ENV=production
    networks:
      - fitnest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Payment Service
  payment-service:
    build:
      context: ./backend/PaymentService
      dockerfile: Dockerfile
    container_name: fitnest-payment-service
    ports:
      - "3003:3003"
    volumes:
      - ./backend/PaymentService:/app
      - payment_service_node_modules:/app/node_modules
    env_file:
      - ./backend/PaymentService/.env
    environment:
      - PORT=3003
      - NODE_ENV=production
    networks:
      - fitnest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build:
      context: ./backend/UserService
      dockerfile: Dockerfile
    container_name: fitnest-user-service
    ports:
      - "3004:3004"
    volumes:
      - ./backend/UserService:/app
      - user_service_node_modules:/app/node_modules
    env_file:
      - ./backend/UserService/.env
    environment:
      - PORT=3004
      - NODE_ENV=production
    networks:
      - fitnest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trainer Service
  trainer-service:
    build:
      context: ./backend/TrainerService
      dockerfile: Dockerfile
    container_name: fitnest-trainer-service
    ports:
      - "3005:3005"
    volumes:
      - ./backend/TrainerService:/app
      - trainer_service_node_modules:/app/node_modules
    env_file:
      - ./backend/TrainerService/.env
    environment:
      - PORT=3005
      - NODE_ENV=production
    networks:
      - fitnest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Service
  admin-service:
    build:
      context: ./backend/AdminService
      dockerfile: Dockerfile
    container_name: fitnest-admin-service
    ports:
      - "3006:3006"
    env_file:
      - ./backend/AdminService/.env
    environment:
      - PORT=3006
      - NODE_ENV=production
    networks:
      - fitnest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  fitnest-network:
    driver: bridge

volumes:
  # Named volumes for node_modules to avoid conflicts with host
  api_gateway_node_modules:
    driver: local
  auth_service_node_modules:
    driver: local
  gym_service_node_modules:
    driver: local
  payment_service_node_modules:
    driver: local
  user_service_node_modules:
    driver: local
  trainer_service_node_modules:
    driver: local
  # Add any other volumes if needed for persistent data
  node_modules_cache:
    driver: local
